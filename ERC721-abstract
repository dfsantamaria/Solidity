// SPDX-License-Identifier: GPL-3.0
//Author:Daniele Francesco Santamaria daniele.santamaria@unict.it

pragma solidity ^0.8.0;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/interfaces/IERC721.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/IERC721Metadata.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/IERC721Receiver.sol";


/*
   Remember to update function _baseURI()
   Remember to update mint()
   Remember to update burn()
   Remember to modify _tokens
*/

contract ERC721 is Context, IERC721, ERC165, IERC721Metadata
{
    using SafeMath for uint256;
    using Address for address;

    //the set of tokens - to be customized -
    uint256 [] private _tokens;
    //the contract owner
    address private _owner;
    //the contract name
    string _name;
    //the contract symbol
    string _symbol;
    //the contract pause state
    bool private _paused;   

    // Event list    
    event Pause(address account);
    event Unpause(address account);    
    event Mint(address to, uint256 tokenId);
    event Burn(address owner, uint256 tokenId);
    event ChangeOwnership(address oldowner, address newowner);
    //event Transfer(address from, address to, uint256 tokenId);
    //event Approval(address from, address to, uint256 tokenId);
    //event ApprovalForAll(address owner, address operator, bool approved);

    
    /*
    Modifier
    */

    /*
     Ensure that the caller is the owner.
     */ 
    modifier onlyOwner()
     {
        require(isOwner(), "Ownable: caller is not the owner");
        _;
     }

    /*
     Ensure that the contract is not paused.
     */
    modifier whenNotPaused() {
        require(!_paused, "Pausable: paused");
        _;
    }

     /*
     Ensure that the contract is not paused.
     */
    modifier whenPaused() {
        require(_paused, "Pausable: not paused");
        _;
    }

     /*
     Ensure the existence of the given token.
     */
    modifier tokenExist(uint256 tokenId)
    {
       require(_exists(tokenId), "ERC721: non-existing token");
       _;
    }

    //Mapping from hash to token ID
    mapping(bytes32 => uint) tokenHashToId;

    // Mapping from token ID to owner address
    mapping(uint256 => address) private _owners;

    // Mapping owner address to token count
    mapping(address => uint256) private _balances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    constructor(string memory name_, string memory symbol_)  
    {               
       _name=name_;
       _symbol=symbol_;
       _owner= msg.sender;       
       _paused = false;
       //mint the first token
       //mint(_owner, 0);
    }

   

      function mint(address to, uint256 token) public virtual whenNotPaused
      {
        require(to != address(0), "ERC721: mint to the zero address");       
        bytes32 _hash = keccak256(abi.encodePacked(token));
        require(!_existsHash(_hash), "ERC721: token already minted");
        _tokens.push(token);       
        uint256 tokenId = _tokens.length-1;
        tokenHashToId[_hash] = tokenId;        
        _beforeTokenTransfer(address(0), to, tokenId);
        _balances[to] += 1;
        _owners[tokenId] = to;        
        _afterTokenTransfer(address(0), to, tokenId);

       //safeMint 
       // require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
        emit Mint(to, tokenId);
      }  


      function burn(uint256 tokenId) public virtual whenNotPaused tokenExist(tokenId)
      {       
        address owner = ownerOf(tokenId); 
        _burn(tokenId, owner);
        emit Burn(owner, tokenId);        
      }

     /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) public virtual override whenNotPaused tokenExist(tokenId)
     {
               
        address owner = ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");
        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),"ERC721: approve caller is not owner nor approved for all");
         _approve(to, tokenId);
     }
    
  
     /**
     * @dev See {IERC721-transferFrom}.
     */
    function transferFrom(address from, address to, uint256 tokenId) public virtual override whenNotPaused tokenExist(tokenId)
     {        
        _transfer(from, to, tokenId);
        emit Transfer(from, to, tokenId);
     }

     /**
     * @dev See {IERC721-safeTransferFrom}.
     */     
    function safeTransferFrom(address from, address to, uint256 tokenId ) public virtual override whenNotPaused tokenExist(tokenId)
     {
       safeTransferFrom(from, to, tokenId, "");  
     }
    
    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override whenNotPaused tokenExist(tokenId)
     {
       _safeTransfer(from, to, tokenId, _data);
     }
    
    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override whenNotPaused
    {
      _setApprovalForAll(_msgSender(), operator, approved);
    }


    /*
    * Pause the contract
    */
    function pause() public onlyOwner whenNotPaused
    {
        _paused = true;
        emit Pause(msg.sender);
    }

    // Unpause the contract
    function unpause()  public onlyOwner  whenPaused
    {
        _paused = false;
        emit Unpause(msg.sender);
    }
    
   /*
   * Destroy this smart contract and withdraw balance to owner
	*/
   function shutdown() public	onlyOwner
	{
      selfdestruct(payable(msg.sender));
   }

   /*
      External
   */
    
    /*
    *  Allows the owner to catch the balance available in the contract.
    */
    function withdrawBalance()  external onlyOwner
    {
       payable(msg.sender).transfer(address (this).balance);
    }

    function transferOwnership(address newowner) external onlyOwner
    {
        _owner=newowner;
        emit ChangeOwnership(msg.sender, newowner);
    }


    /*
       View functions
    */


     /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool)
     {
       return _operatorApprovals[owner][operator];   
     }
    

     /**
     * @dev See {IERC721-getApproved}.
     */
    function getApproved(uint256 tokenId) public view virtual override returns (address) 
    {      
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");
        return _tokenApprovals[tokenId];    
    }


     /**
     * @dev See {IERC721-balanceOf}.
     */
    function balanceOf(address owner) public view virtual override returns (uint256)
     {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _balances[owner];
    }
    
     /**
     * @dev See {IERC721Metadata-name}.
     */
    function name() public view virtual override returns (string memory)
     {
        return _name;
     }
    
      /**
     * @dev See {IERC721Metadata-symbol}.
     */
    function symbol() public view virtual override returns (string memory)
     {
         return _symbol;
     }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory)
    {
      require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
      string memory baseURI = _baseURI();
      return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, Strings.toString(tokenId))) : "";
    }

   
     /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool)
    {
        return 
        interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }
    
     /**
     * @dev See {IERC721-ownerOf}.
     */
    function ownerOf(uint256 tokenId) public view virtual override returns (address)
    {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");
        return owner; 
    }

    /*
    * Returns true if the caller is the current owner.
    */
    function isOwner() public  view returns (bool)
    {
        return msg.sender == _owner;
    }

     /**
     * Returns the pause state of the contract
     */
    function isPaused() public view returns (bool)
    {
      return _paused;
    }  

    function tokenInfo(uint256 tokenId) public view returns (uint256, address) 
     {
         require(!_paused, "Pausable: paused");
         require(tokenId<_tokens.length, "Token never minted");
         if(_tokens[tokenId] ==0 )
           return(0,address(0));
         return(_tokens[tokenId], _owners[tokenId]);
     }

    /*
    Internal
    */
    
    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function _exists(uint256 tokenId) internal view virtual returns (bool)
     {                
         return tokenId<_tokens.length && _tokens[tokenId] != 0;
     }
       
     function _existsHash(bytes32 hash) internal view virtual returns (bool)
     {
        return (tokenHashToId[hash]!=0);       
     }


    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Burn} event.
     */
    function _burn(uint256 tokenId, address owner) internal virtual
     {        
        _beforeTokenTransfer(owner, address(0), tokenId);
        // Clear approvals
        _approve(address(0), tokenId);
        _balances[owner] = SafeMath.sub(_balances[owner], 1);
        delete _owners[tokenId];   
        uint256 token=_tokens[tokenId];
        bytes32 hash = keccak256(abi.encodePacked(token));
        tokenHashToId[hash]=0;
        delete _tokens[tokenId];                
        _afterTokenTransfer(owner, address(0), tokenId);
    }


     /**
     * @dev Approve `to` to operate on `tokenId`
     *
     * Emits a {Approval} event.
     */
    function _approve(address to, uint256 tokenId) internal virtual
    {
        _tokenApprovals[tokenId] = to;
        emit Approval(ownerOf(tokenId), to, tokenId);
    }
    

     /**
     * @dev Returns whether `spender` is allowed to manage `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool)
     {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ownerOf(tokenId);
        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);
    }

     /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    function _transfer(address from, address to, uint256 tokenId) internal virtual
     {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        require(ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
        require(to != address(0), "ERC721: transfer to the zero address");
        _beforeTokenTransfer(from, to, tokenId);
        // Clear approvals from the previous owner
        _approve(address(0), tokenId);
        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;        
        _afterTokenTransfer(from, to, tokenId);
    }


     /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * `_data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual
     {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    
    /**
     * @dev Approve `operator` to operate on all of `owner` tokens
     *
     * Emits a {ApprovalForAll} event.
     */
    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual
     {
        require(owner != operator, "ERC721: approve to caller");
        _operatorApprovals[owner][operator] = approved;
        emit ApprovalForAll(owner, operator, approved);
    }


     /**
     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
     * by default, can be overridden in child contracts.
     */
    function _baseURI() internal view virtual returns (string memory)
     {
        return "";
     }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
     * The call is not executed if the target address is not a contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param _data bytes optional data to send along with the call
     * @return bool whether the call correctly returned the expected magic value
     */
    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool)
     {
        if (to.isContract())
         {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval)
             {
                return retval == IERC721Receiver.onERC721Received.selector;
             } 
             catch (bytes memory reason) 
             {
                if (reason.length == 0)
                {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } 
                else 
                {
                    assembly { revert(add(32, reason), mload(reason)) }
                }
            }
        }
        else 
         {
            return true;
        }
    }


     /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {}

     /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(address from, address to, uint256 tokenId) internal virtual {}
}
